name: 'Deploy'

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src/PollyUniverse

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore PollyUniverse.Voting.Func/PollyUniverse.Voting.Func.csproj

      - name: Build
        run: dotnet build PollyUniverse.Voting.Func/PollyUniverse.Voting.Func.csproj --configuration Release --no-restore

      - name: Publish
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace \
            mcr.microsoft.com/dotnet/sdk:8.0-jammy \
            bash -c "
              apt-get update && \
              apt-get install -y clang zlib1g-dev && \
              dotnet publish PollyUniverse.Voting.Func/PollyUniverse.Voting.Func.csproj --configuration Release --runtime linux-x64 --self-contained --output ./publish
            "

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: voting-lambda
          path: ./src/PollyUniverse/publish/
          retention-days: 1

  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [build]

    defaults:
      run:
        working-directory: ./deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: voting-lambda
          path: ./voting-lambda

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '~1.13'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false

  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production
    needs: [plan]

    defaults:
      run:
        working-directory: ./deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: voting-lambda
          path: ./voting-lambda

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '~1.13'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false
